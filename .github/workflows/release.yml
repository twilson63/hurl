name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

  build-linux:
    name: Build Linux (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64, armv7]
    needs: create-release
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Install cross-compilation tools
        run: cargo install cross
      
      - name: Build
        run: cross build --release --bin hurl --target ${{ matrix.arch }}-unknown-linux-gnu
      
      - name: Create tarball
        run: |
          mkdir -p hurl-${{ github.ref_name }}-${{ matrix.arch }}-linux
          cp target/${{ matrix.arch }}-unknown-linux-gnu/release/hurl hurl-${{ github.ref_name }}-${{ matrix.arch }}-linux/
          cp man/hurl.1 hurl-${{ github.ref_name }}-${{ matrix.arch }}-linux/
          cp README.md hurl-${{ github.ref_name }}-${{ matrix.arch }}-linux/
          cp LICENSE-MIT hurl-${{ github.ref_name }}-${{ matrix.arch }}-linux/
          tar czf hurl-${{ github.ref_name }}-${{ matrix.arch }}-linux.tar.gz hurl-${{ github.ref_name }}-${{ matrix.arch }}-linux/
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./hurl-${{ github.ref_name }}-${{ matrix.arch }}-linux.tar.gz
          asset_name: hurl-${{ github.ref_name }}-${{ matrix.arch }}-linux.tar.gz
          asset_content_type: application/gzip

  build-macos:
    name: Build macOS (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-14
            arch: aarch64
            target: aarch64-apple-darwin
    needs: create-release
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Build
        run: cargo build --release --bin hurl --target ${{ matrix.target }}
      
      - name: Create tarball
        run: |
          mkdir -p hurl-${{ github.ref_name }}-${{ matrix.arch }}-apple-darwin
          cp target/${{ matrix.target }}/release/hurl hurl-${{ github.ref_name }}-${{ matrix.arch }}-apple-darwin/
          cp man/hurl.1 hurl-${{ github.ref_name }}-${{ matrix.arch }}-apple-darwin/
          cp README.md hurl-${{ github.ref_name }}-${{ matrix.arch }}-apple-darwin/
          cp LICENSE-MIT hurl-${{ github.ref_name }}-${{ matrix.arch }}-apple-darwin/
          tar czf hurl-${{ github.ref_name }}-${{ matrix.arch }}-apple-darwin.tar.gz hurl-${{ github.ref_name }}-${{ matrix.arch }}-apple-darwin/
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./hurl-${{ github.ref_name }}-${{ matrix.arch }}-apple-darwin.tar.gz
          asset_name: hurl-${{ github.ref_name }}-${{ matrix.arch }}-apple-darwin.tar.gz
          asset_content_type: application/gzip

  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x86_64, i686]
        include:
          - arch: x86_64
            target: x86_64-pc-windows-msvc
          - arch: i686
            target: i686-pc-windows-msvc
    needs: create-release
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Build
        run: cargo build --release --bin hurl --target ${{ matrix.target }}
      
      - name: Create zip archive
        shell: powershell
        run: |
          $dir = "hurl-${{ github.ref_name }}-${{ matrix.arch }}-pc-windows-msvc"
          New-Item -ItemType Directory -Path $dir
          Copy-Item "target/${{ matrix.target }}/release/hurl.exe" $dir/
          Copy-Item "README.md" $dir/
          Copy-Item "LICENSE-MIT" $dir/
          Compress-Archive -Path $dir -DestinationPath "$dir.zip"
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./hurl-${{ github.ref_name }}-${{ matrix.arch }}-pc-windows-msvc.zip
          asset_name: hurl-${{ github.ref_name }}-${{ matrix.arch }}-pc-windows-msvc.zip
          asset_content_type: application/zip

  build-packages:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: build-linux
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Build Debian package
        run: dpkg-buildpackage -us -uc
      
      - name: Upload Debian package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ../hurl_${{ github.ref_name }}_amd64.deb
          asset_name: hurl_${{ github.ref_name }}_amd64.deb
          asset_content_type: application/octet-stream
